#!/bin/sh
#|-*- mode:lisp -*-|#
#|Dump image for faster startup or Make Executable
exec ros -- $0 "$@"
|#

(progn
  (ros:include "util")
  (unless (find-package :uiop)
    #-quicklisp(require :uiop)
    #+quicklisp(ql:quickload :uiop :silent t)))

(defpackage :ros.script.dump.3672012101
  (:use :cl :ros.util))
(in-package :ros.script.dump.3672012101)

(defun dump-dir ()
  (merge-pathnames (format nil "impls/~A/~A/~A/dump/"
                           (uname-m) (uname) (ros:opt "impl"))
                   (homedir)))

(defun dump-output (params &optional force)
  (flet ((%dump (path &optional mode)
           (if (and (not force)
                    (probe-file path))
               ;; idea??
               ;; (y-or-n-p "Output file exists. Overwrite? [Y,n]")
               (if (eql mode :normal)
                   (format *error-output* "dump ~s already exists~%" (pathname-name path))
                   (format *error-output* "file ~s already exists~%" path))
               (progn
                 #+sbcl
                 (sb-ext:save-lisp-and-die path)
                 #+ccl
                 (ccl:save-application path)
                 #+clisp
                 (ext:saveinitmem path :quiet t)))))
    (cond
      ((null params)
       (format *error-output* "Usage: ~A [OPTIONS] dump output [-f] [-o OUTPUT] NAME~%" (ros:opt "argv0")))
      ((equal "-f" (first params))
       (dump-output (rest params) t))
      ((equal "-o" (first params))
       (if (> (length params) 1)
           (%dump (second params))
           (format *error-output* "Missing the pathname for an image.~%")))
      (t (let ((path (merge-pathnames (format nil "~A.~A" (first params) (ros.util:core-extention))
                                      (dump-dir))))
           (%dump (ensure-directories-exist path) :normal))))))

#+sbcl
(defun %dump-executable (cmds out)
  (sb-ext:save-lisp-and-die
   out
   ;; no need to do GC because of :purify t by default
   ;; however, this only affects old cheyneyGC
   ;; http://www.sbcl.org/manual/#Efficiency-Hacks
   :purify t ; just here to make it explicit
   :toplevel
   #'(lambda ()
       (setf *load-pathname* (pathname (first sb-ext:*posix-argv*)))
       (setf ros:*argv* (rest sb-ext:*posix-argv*))
       (ros:run cmds))
   :executable t
   :save-runtime-options t))


#+ccl
(defun %dump-executable (cmds out)
  (ccl:save-application
   out
   :toplevel-function
   #'(lambda ()
       (setf *load-pathname* (pathname (first (ccl::command-line-arguments))))
       (setf ros:*argv* (rest (ccl::command-line-arguments)))
       (ros:run cmds))
   :prepend-kernel t))

#+clisp
(defun %dump-executable (cmds out)
  (ext:saveinitmem
   out
   :quiet t
   :executable 0
   :norc t
   :script nil
   :init-function
   #'(lambda ()
       (setf *load-pathname* (pathname (first ext:*args*)))
       (setf ros:*argv* (rest ext:*args*))
       (ros:run cmds))))


;;; cmucl

;; cf. https://common-lisp.net/project/cmucl/doc/cmu-user/extensions.html#toc47

;; "This feature is only available on some platforms, as indicated by having the feature
;; :executable. Currently only x86 ports and the solaris/sparc port have this feature."
#+(and cmucl executable)
(defun %dump-executable (cmds out)
  (setf ext:*batch-mode* nil)
  (setf ext::*gc-run-time* 0)
  (ext:save-lisp
   out
   ;; no need to do GC because of :purify t by default
   :purify t ; just here to make it explicit
   :executable t
   :print-herald nil ; suppress verbose startup message
   :init-function
   #'(lambda ()
       (setf *load-pathname* (pathname (first extensions:*command-line-strings*)))
       (setf ros:*argv* (rest extensions:*command-line-strings*))
       (ros:run cmds))
   :process-command-line nil))

#-(or sbcl ccl clisp (and cmucl executable))
(defun %dump-executable (cmds out)
  "more informative error message"
  (format *error-output*
          "While dumping ~a to ~a:
ros dump executable is supported only when the following features are present:
 (or sbcl ccl clisp (and cmucl executable))

On CMUCL, :executable is supported on x86, solaris and sparc.
" cmds out)
  (ros:quit 1))


(defun dump-executable (params)
  (if params
      (let ((cmds (let ((*read-eval*))
                    (read-from-string
                     (format nil "(~A)"
                             (ros:opt "restart")))))
            (out (first params))
            (actual-out (or (and (equal (second params) "-o") ;; skimped ...
                                 (third params))
                            (first params))))
        (unless cmds
          (warn "dumping an executable without specifing the initial behaviour."))
        (when (equalp (pathname-type out) "ros")
          (let ((*package* (find-package :cl-user))
                main-list)
            (ros:script nil out)
            (setf main-list (let ((*package* (find-package :keyword)))
                              `((:entry ,(format nil "~S" ros:*main*))))
                  out (make-pathname :type #-win32 nil #+win32 "exe" :defaults actual-out)
                  cmds (if (first cmds)
                           (append cmds main-list)
                           main-list))))
        (%dump-executable cmds out))
      (format *error-output* "Usage: ros dump executable help~%")))







(defvar *subcmds*
  '(("output" dump-output)
    ("executable" dump-executable)))

(defun main (cmd &rest r)
  (if r
      (let ((func (second (assoc (first r) *subcmds* :test 'equal))))
        (if func
            (funcall func (rest r))
            (format *error-output* "'~A' is not a valid command for '~A' subcommand~%" (first r) cmd)))
      (format t "~{~a~%~}" (mapcar #'car *subcmds*))))
;;; vim: set ft=lisp lisp:
