#!/bin/sh
#|-*- mode:lisp -*-|#
#|Get and set options
exec ros +Q -m roswell -L sbcl-bin -- $0 "$@"
|#

(progn
  (ros:include "util"))

(defpackage :ros.script.config.3668210854
  (:use :cl))

(in-package :ros.script.config.3668210854)

(defun load-config (path)
  (with-open-file (in path)
    (loop for line = (read-line in nil nil)
          while line
          collect
          (loop for last = -1 then pos
                for pos = (position #\Tab line :start (1+ last))
                collect (subseq line (1+ last) pos)
                while pos))))

(defun save-config (path config)
  (with-open-file (out path :direction :output
                            :if-exists :supersede
                            :if-does-not-exist :create)
    (loop for line in config
          do (format out #.(format nil "~{~A~}" '("~{~A~^" #\Tab "~}~%")) line))))

(defun unconfig (config var)
  (remove var config :test 'equal :key #'first))

(defun config (config var val)
  (let ((found (find var config :test 'equal :key #'first)))
    (if found
        (progn
          (setf (third found) val)
          config)
        (cons (list var "0" val)
              config))))

(defun main (cmd &rest argv)
  (declare (ignore cmd))
  (let* ((path (merge-pathnames "config" (ros.util:version "confdir")))
         (conf (load-config path))
         (len (length argv)))
    (cond
      ((= 0 len)
       (loop for i in conf
             do (format *error-output* "~A=~A~%" (first i) (third i))
             finally (format *error-output* "~%Possible subcommands:~%set~%show~%")) 0)
      ((= 1 len)
       (setf conf (unconfig conf (first argv)))
       (save-config path conf) 0)
      ((and (equal (first argv) "set") (= 3 len))
       (setf conf (config conf (second argv) (third argv)))
       (save-config path conf) 0)
      ((and (equal (first argv) "show") (= 2 len))
       (format t "~A~%" (third (find (second argv) conf :test 'equal :key #'first))) 0)
      ((= 2 len)
       (setf conf (config conf (first argv) (second argv)))
       (save-config path conf) 0)
      (t 1))))
;;; vim: set ft=lisp lisp:
