#!/bin/sh
#|-*- mode:lisp -*-|#
#|[WIP] Manage swank version for roswell
exec ros -Q -m roswell -L sbcl-bin -- $0 "$@"
|#

(progn
  (ros:include "util")
  (ros:include "util-install")
  (ros:include "util-swank")
  (ros:quicklisp :environment nil)
  (unless (find-package :plump)
    (ql:quickload '(:plump) :silent t)))

(defpackage :ros.script.swank.3671440529
  (:use :cl :ros.locations :ros.util :ros.swank.util))

(in-package :ros.script.swank.3671440529)

(defvar *sub* '(("rm" . swank-rm)
                ("delete" . swank-rm)
                ("install" . swank-install)
                ("list" . swank-list)))

(defun swank-get-version ()
  (ros.install::github-version
   (swank-git-version-uri) "swank" (lambda (href) (subseq href (+ 2 (position #\/ href :from-end t))))))

(defun usage ()
  (let ((s *error-output*))
    (format s "Usage: ~A swank install/use/list/delete version ~%" (ros:opt "wargv0"))))

(defun swank-from-git (name)
  (let* ((str (slime-uri))
         (end (position #\/ str :from-end t))
         (end2 (position #\. str :from-end t))
         (start (position #\/ str :from-end t :end end)))
    (ros.util:clone-github
     (subseq str (1+ start) end)
     (subseq str (1+ end) end2)
     :path "lisp/swank" :branch (format nil "v~A" name) :alias name))
  :git)

(defun swank-from-ql (name)
  (let ((dist-file (merge-pathnames "tmp/swank-distinfo.txt" (homedir)))
        (versions-uri (ql-util:make-versions-url ql:*initial-dist-url*))
        (versions-file (merge-pathnames "tmp/swank-versions.txt" (homedir)))
        (release-file (merge-pathnames "tmp/swank-release.txt" (homedir)))
        (archive-file (merge-pathnames "tmp/swank.tgz" (homedir)))
        (extract-path (merge-pathnames "lisp/swank/tmp/" (homedir)))
        dist)
    (unless (ql-impl-util:probe-directory extract-path)
      (download versions-uri versions-file)
      (let* ((key (substitute #\- #\. name))
             (uri (with-open-file (in versions-file)
                    (loop
                      for e = (ql-util:split-spaces (read-line in nil nil))
                      while e
                      when (equal key (first e))
                        return (second e)))))
        (if uri
            (download uri dist-file)
            (progn
              (format *error-output* "invalid version ~A" name)
              (ros:quit 1))))
      (setq dist (ql-dist::make-dist-from-file dist-file))
      (download (ql-dist::release-index-url
                 (ql-dist::make-dist-from-file #P"~/.roswell/tmp/swank-distinfo.txt"))
                release-file)
      (with-open-file (in release-file)
        (loop for line = (read-line in nil nil)
              while line
              for list = (ql-util:split-spaces line)
              when (equal (first list) "slime")
                do (download (second list) archive-file)))
      (uiop/filesystem:delete-directory-tree (ensure-directories-exist extract-path) :validate t)
      (expand archive-file (ensure-directories-exist extract-path))
      (prog1
          (ql-impl-util:rename-directory
           (first (directory (make-pathname :defaults extract-path :name :wild :type :wild)))
           (merge-pathnames (format nil "lisp/swank/~A/" name) (homedir)))
        (uiop/filesystem:delete-directory-tree (ensure-directories-exist extract-path) :validate t))))
  :ql)

(defun name-error (name)
  (format *error-output* "~A is not appropriate format. ~% quicklisp dist for XXXX.XX.XX , slime version for X.XX.~%" name)
  (ros:quit 1))

(defun swank-write-helper ()
  (let* ((target (merge-pathnames "helper.el" (homedir)))
         (enough (enough-namestring target (user-homedir-pathname))))
    (unless (equal (pathname enough) target)
      (setf enough (format nil "~~/~A" enough)))
    (uiop:copy-file
     (make-pathname
      :defaults #.*load-pathname*
      :name "helper" :type "el")
     target)
    (format *error-output* "~{~A~%~}"
            `(,(format nil "helper.el installed in ~S" (namestring target)) ""
              "To use, add this to your ~/.emacs:" ""
              ,(format nil "  (load (expand-file-name ~S))" enough)))))

(defun swank-install (&optional name &rest argv)
  "two type of name would be accepted 'date format' or 'version'"
  (declare (ignorable argv))
  (unless name
    (setq name (substitute #\. #\- (ql:dist-version "quicklisp"))))
  (unless (loop for x across name
                always (or (digit-char-p x)
                           (eql x #\.)))
    (name-error name))
  (case (count #\. name)
    (1 (swank-from-git name))
    (2 (or
        (ignore-errors (swank-from-git name)) ;; 2.10.1 couldn't be install without this line.
        (swank-from-ql name)))
    (t (name-error name)))
  (swank-write-version name)
  (swank-write-helper))

(defun swank-list (&rest r)
  (declare (ignorable r))
  (dolist (i (swank-get-version))
    (format t "~A~%" i)))

(defun main (cmd &optional sub &rest argv)
  (declare (ignore cmd))
  (let ((func (cdr (assoc sub *sub* :test #'equal))))
    (when func
      (ros:quit (apply func argv))))
  (usage))
;;; vim: set ft=lisp lisp:
