#!/bin/sh
#|-*- mode:lisp -*-|#
#|Initial setup
exec ros -Q -L sbcl-bin -- $0 "$@"
|#

#-ros.util
(ros:include "util")

(defpackage :ros.sub.setup
  (:use :cl :ros.util))
(in-package :ros.sub.setup)

(defun main (&rest argv)
  (declare (ignorable argv))
  #-win32
  (ignore-errors
   (require :sb-posix)
   (sb-posix:setgid (parse-integer (sb-posix:getenv "SUDO_GID")))
   (sb-posix:setuid (parse-integer (sb-posix:getenv "SUDO_UID"))))
  (format *error-output* "Installing Quicklisp...~%")
  (ros:roswell '("install" "quicklisp") :interactive nil)
  #+win32
  (progn
    (format *error-output* "Installing 7zip...~%")
    (ros:roswell '("install" "7zip+") :interactive nil))
  ;;  if(argc==1) ??
  (let ((dir (append (directory (make-pathname :defaults *load-pathname* :name :wild))
                     (directory (merge-pathnames "cmds/*.ros" (homedir))))))
    (unless (ignore-errors
             (when (> (parse-integer (ros.util:version :date))
                      (loop for i in dir
                            maximize (file-write-date i)))
               (format *error-output* "up to date. stop~%")
               t))
      (ros:roswell `("-L " "sbcl-bin " "--eval "
			   #-win32 "'" "(ros:ignore-shebang)" #-win32 "'" " "
			   ,@(loop :for i :in dir
                                   :collect "--load"
                                   :collect (format nil "~A" i))
			   " dump output -f roswell")
                   t nil)
      (ros:roswell `("template" "add" "-f"
                                ,(namestring (make-pathname :name "default"
                                                            :type nil
                                                            :defaults *load-pathname*))
                                "--optional" "NAME" "'#.(pathname-name (merge-pathnames ros.sub.init:*filename*))'"
                                "--" "DATETIME" "'#.(get-universal-time)'")
                   t nil))))

(push :ros.sub.setup *features*)
