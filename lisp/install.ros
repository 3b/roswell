#!/bin/sh
#|-*- mode:lisp -*-|#
#|Install a given implementation or a system for roswell environment
exec ros -Q +R -L sbcl-bin -- $0 "$@"
|#

(progn
  (ros:include "util")
  (ros:include "util-install")
  (when (probe-file (merge-pathnames "setup.lisp" (ros:opt "quicklisp")))
    (ros:include "util-install-quicklisp")))

(defpackage :ros.script.install.3671936092
  (:use :cl :ros.util :ros.locations :ros.install))

(in-package :ros.script.install.3671936092)

(defun main (cmd impl/version &rest argv)
  (declare (ignore cmd))
  (let* (imp
         (pos (position #\/ impl/version))
         (*ros-path* (make-pathname :defaults (ros:opt "argv0")))
         version tag)
    (cond
      (pos
       (setq version (subseq impl/version (1+ pos))
             imp (subseq impl/version 0 pos)
             pos (position #\/ version))
       (when pos
         (setq tag (subseq version (1+ pos))
               version (subseq impl/version 0 pos))))
      (t (setq imp impl/version)))
    (read-call "quicklisp-client:register-local-projects")
    (cond ((install-impl-if-probed imp version argv))
          ((install-script-if-probed impl/version))
          ((install-system-if-probed imp))
          (version
           (clone-github imp version :path "local-projects" :branch tag)
           (read-call "quicklisp-client:register-local-projects")
           (or (install-impl-if-probed version nil argv)
               (install-system-if-probed version)))
          (t (format *error-output* "'~A' is not a valid target for 'install' -- It should be a name of either:
+ a quicklisp-installable system
+ a common lisp installation ~%" imp)
             (ros:quit 1)))
    (ros:exec `(,(ros:opt "argv0") "setup"))))
;;; vim: set ft=lisp lisp:
