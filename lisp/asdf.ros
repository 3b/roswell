#!/bin/sh
#|-*- mode:lisp -*-|#
#|manage asdf version
exec ros -Q -m roswell -L sbcl-bin -- $0 "$@"
|#

(progn
  (ros:include '("locations" "util-install"))
  (ros:quicklisp :environment nil)
  (unless (find-package :plump)
    (ql:quickload '(:plump) :silent t)))

(defpackage :ros.script.asdf.3672011844
  (:use :cl :roswell.util :roswell.locations :roswell.install))
(in-package :ros.script.asdf.3672011844)

(defun asdf-get-version ()
  (format *error-output* "Checking version to install....~%")
  (github-version
   (asdf-git-version-uri) "asdf" (lambda (href) (subseq href (1+ (position #\/ href :from-end t))))))

(defvar *subcommands*
  '(("install" . asdf-install)
    ("use" . asdf-use)
    ("list" . asdf-list)
    ("delete" . asdf-delete)))

(defun asdf-install (&optional version &rest r)
  (declare (ignorable r))
  (setf version (or version (first (asdf-get-version))))
  (let ((url (format nil "~A~A.tar.gz" (asdf-uri) version))
        (file (merge-pathnames (format nil "archives/asdf-~A.tar.gz" version) (homedir)))
        (src (merge-pathnames "src/" (homedir))))
    (unless (probe-file file)
      (download url file))
    (expand file src)
    (let* ((src (merge-pathnames (format nil "asdf-~A/" version) src))
           (cmd (list (sh) "-lc" (format nil "cd ~S;~A"
                                         (#+win32 mingw-namestring #-win32 princ-to-string src)
                                         "make"))))
      (uiop/os:chdir src)
      (format t "~&chdir ~A~%" src)
      (uiop/run-program:run-program cmd :output t :ignore-error-status nil)
      (let ((built (merge-pathnames "build/asdf.lisp" src)))
        (if (probe-file built)
            (progn
              (uiop/stream:copy-file
               built
               (ensure-directories-exist
                (merge-pathnames (format nil "lisp/asdf/~A/asdf.lisp" version) (homedir))))
              (setf (config "asdf.version") version))
            (error "build fail asdf ~A~%" 'version))))))

(defun asdf-use (version &rest r)
  (declare (ignorable r))
  (if (probe-file (merge-pathnames (format nil "lisp/asdf/~A/asdf.lisp" version) (homedir)))
      (setf (config "asdf.version") version)
      (error "~A not installed" version)))

(defun asdf-list (&rest r)
  (declare (ignorable r))
  (dolist (i (asdf-get-version))
    (format t "~A~%" i)))

(defun usage ()
  (let ((s *error-output*))
    (format s "Usage: ~A asdf install/use/list/delete version ~%" (opt "wargv0"))))

(defun main (&optional subcmd &rest argv)
  (if subcmd
      (let ((fun (cdr (assoc subcmd *subcommands* :test 'equal))))
        (apply fun argv))
      (usage)))
;;; vim: set ft=lisp lisp:
