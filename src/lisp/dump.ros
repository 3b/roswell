#!/bin/sh
#|-*- mode:lisp -*-|#
#|Dump image for faster startup or Make Executable
exec ros -- $0 "$@"
|#

(defpackage :ros.dump
  (:use :cl))
(in-package :ros.dump)

(defvar *opts* (let ((*read-eval*))
                 (read-from-string (uiop/os:getenv "ROS_OPTS"))))

(defun opt(param)
  (second (assoc param *opts* :test 'equal)))

(defun homedir ()
  (opt "homedir"))

(defun roswell-internal (args output)
  (uiop/run-program:run-program
   (format nil "~A roswell-internal-use~{ ~A~}"
           (opt "argv0") args) :output output))

(defun uname ()
  (remove #\Newline (remove #\Return (roswell-internal `("uname") :string))))

(defun uname-m ()
  (remove #\Newline (remove #\Return (roswell-internal `("uname" "-m") :string))))

(defun dump-dir ()
  (merge-pathnames (format nil "impls/~A/~A/~A/dump/"
                           (uname-m) (uname) (opt "impl"))
                   (homedir)))

(defun dump-output (params &optional force)
  (flet ((dump (path &optional mode)
           (if (and (not force)
                    (probe-file path))
               (if (eql mode :normal)
                   (format t "dump ~s already exists~%" (pathname-name path))
                   (format t "file ~s already exists~%" path))
               (progn
                 #+sbcl
                 (sb-ext:save-lisp-and-die path)))))
    (cond
      ((null params)
       (format t "Usage: ~A [OPTIONS] dump output [-f] [-o] name~%"
               (second (assoc "argv0" *opts* :test 'equal))))
      ((equal "-f" (first params))
       (dump-output (rest params) t))
      ((equal "-o" (first params))
       (if (> (length params) 1)
           (dump (second params))
           (format t "dump file should be specified.~%")))
      (t (let ((path (merge-pathnames (format nil "~A.core"
                                              (first params))
                                      (dump-dir))))
           (dump (ensure-directories-exist path) :normal))))))

(defun dump-list (params)
  (declare (ignorable params)) ;; tbd list images not only for current image
  (format t "preserved dump lists for ~A:~%" (opt "impl"))
  (format t "~{  ~A~%~}" (mapcar #'pathname-name
                               (directory (make-pathname :name :wild
                                                         :type :wild
                                                         :defaults
                                                         (dump-dir))))))

(defun dump-rm (params)
  (declare (ignorable params))
  (let ((path (make-pathname :name (first params)
                             :type "core"
                             :defaults
                             (dump-dir))))
    (if (probe-file path)
        (delete-file path)
        (format t "image doesn't exist ~s~%" (first params)))))

(defun dump-executable (params)
  (if params
      (let ((cmds (let ((*read-eval*))
                    (read-from-string
                     (format nil "(~A)"
                             (second (assoc "restart" *opts*
                                            :test #'equal)))))))
        #+sbcl
        (sb-ext:save-lisp-and-die
         (first params)
         :toplevel
         #'(lambda ()
             (setf ros:*argv* (rest sb-ext:*posix-argv*))
             (ros:run cmds))
         :executable t))
      (format t "ros dump executable help~%")))

(defvar *subcmds*
  '(("list" "List images" dump-list)
    ("output" "Create dump" dump-output)
    ("rm" "delete image" dump-rm)
    #+sbcl("executable" "Create executable" dump-executable)))

(defun main (subcmd cmd &rest r)
  (cond ((and (equal subcmd "main") r)
         (funcall (third (assoc (first r) *subcmds* :test 'equal)) (rest r)))
        ((or (equal subcmd "help") (not r))
         (format t "Usage: ~A [OPTIONS] ~A subcmd [ARGS]~%"
                 (second (assoc "argv0" *opts* :test 'equal)) cmd)
         (loop :with len := (1+ (loop :for (cmd . nil) :in *subcmds* :maximize (length cmd)))
            :for (cmd desc symbol) :in *subcmds*
            :do (format t "  ~VA ~A~%" len cmd desc)))))
